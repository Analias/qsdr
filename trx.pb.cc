// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TrxProto {

namespace {

const ::google::protobuf::Descriptor* TrxMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrxMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuiMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuiMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_trx_2eproto() {
  protobuf_AddDesc_trx_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trx.proto");
  GOOGLE_CHECK(file != NULL);
  TrxMessage_descriptor_ = file->message_type(0);
  static const int TrxMessage_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, audio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, vfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, vfoactiv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, rxcenterfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, rxfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, agc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, antenne_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, fftsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, filterlo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, filterhi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, filtercut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, filternotchbw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, filternotchfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, notchactiv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, preamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, samplerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, squelchlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, txfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, txpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, presel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, ptt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, playfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, recordfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, playfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, recordfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, keepalive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, readraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, getfilelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, filepos_),
  };
  TrxMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrxMessage_descriptor_,
      TrxMessage::default_instance_,
      TrxMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrxMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrxMessage));
  GuiMessage_descriptor_ = file->message_type(1);
  static const int GuiMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuiMessage, audio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuiMessage, rssi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuiMessage, fft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuiMessage, displaytext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuiMessage, restartind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuiMessage, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuiMessage, files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuiMessage, playfilelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuiMessage, playfilepos_),
  };
  GuiMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuiMessage_descriptor_,
      GuiMessage::default_instance_,
      GuiMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuiMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuiMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuiMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trx_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrxMessage_descriptor_, &TrxMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuiMessage_descriptor_, &GuiMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trx_2eproto() {
  delete TrxMessage::default_instance_;
  delete TrxMessage_reflection_;
  delete GuiMessage::default_instance_;
  delete GuiMessage_reflection_;
}

void protobuf_AddDesc_trx_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ttrx.proto\022\010TrxProto\"\316\004\n\nTrxMessage\022\r\n\005"
    "audio\030\001 \001(\014\022\013\n\003vfo\030\002 \001(\r\022\020\n\010vfoActiv\030\003 \001"
    "(\010\022\024\n\014rxCenterFreq\030\004 \001(\004\022\016\n\006rxFreq\030\005 \001(\004"
    "\022\013\n\003agc\030\006 \001(\r\022\017\n\007antenne\030\007 \001(\r\022\017\n\007fftSiz"
    "e\030\010 \001(\r\022\020\n\010filterLo\030\t \001(\r\022\020\n\010filterHi\030\n "
    "\001(\r\022\021\n\tfilterCut\030\013 \001(\r\022\025\n\rfilterNotchBW\030"
    "\014 \001(\r\022\027\n\017filterNotchFreq\030\r \001(\r\022\022\n\nnotchA"
    "ctiv\030\016 \001(\010\022\016\n\006preAmp\030\017 \001(\005\022\014\n\004mode\030\020 \001(\r"
    "\022\022\n\nsampleRate\030\021 \001(\r\022\024\n\014squelchLevel\030\022 \001"
    "(\005\022\016\n\006txFreq\030\023 \001(\004\022\017\n\007txPower\030\024 \001(\r\022\016\n\006p"
    "resel\030\025 \001(\r\022\014\n\004gain\030\026 \001(\r\022\013\n\003ptt\030\027 \001(\010\022\020"
    "\n\010settings\030\031 \001(\014\022\024\n\014playFileName\030\032 \001(\t\022\026"
    "\n\016recordFileName\030\033 \001(\t\022\020\n\010playFile\030\034 \001(\010"
    "\022\022\n\nrecordFile\030\035 \001(\010\022\021\n\tkeepAlive\030\036 \001(\010\022"
    "\017\n\007readRaw\030\037 \001(\010\022\023\n\013getFileList\030  \001(\010\022\017\n"
    "\007filepos\030! \001(\r\"\245\001\n\nGuiMessage\022\r\n\005audio\030\001"
    " \001(\014\022\014\n\004rssi\030\002 \001(\002\022\013\n\003fft\030\003 \001(\014\022\023\n\013displ"
    "ayText\030\004 \001(\014\022\022\n\nrestartInd\030\005 \001(\010\022\013\n\003key\030"
    "\006 \001(\014\022\r\n\005files\030\007 \003(\t\022\023\n\013playFileLen\030\010 \001("
    "\004\022\023\n\013playFilePos\030\t \001(\004", 782);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trx.proto", &protobuf_RegisterTypes);
  TrxMessage::default_instance_ = new TrxMessage();
  GuiMessage::default_instance_ = new GuiMessage();
  TrxMessage::default_instance_->InitAsDefaultInstance();
  GuiMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trx_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trx_2eproto {
  StaticDescriptorInitializer_trx_2eproto() {
    protobuf_AddDesc_trx_2eproto();
  }
} static_descriptor_initializer_trx_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TrxMessage::kAudioFieldNumber;
const int TrxMessage::kVfoFieldNumber;
const int TrxMessage::kVfoActivFieldNumber;
const int TrxMessage::kRxCenterFreqFieldNumber;
const int TrxMessage::kRxFreqFieldNumber;
const int TrxMessage::kAgcFieldNumber;
const int TrxMessage::kAntenneFieldNumber;
const int TrxMessage::kFftSizeFieldNumber;
const int TrxMessage::kFilterLoFieldNumber;
const int TrxMessage::kFilterHiFieldNumber;
const int TrxMessage::kFilterCutFieldNumber;
const int TrxMessage::kFilterNotchBWFieldNumber;
const int TrxMessage::kFilterNotchFreqFieldNumber;
const int TrxMessage::kNotchActivFieldNumber;
const int TrxMessage::kPreAmpFieldNumber;
const int TrxMessage::kModeFieldNumber;
const int TrxMessage::kSampleRateFieldNumber;
const int TrxMessage::kSquelchLevelFieldNumber;
const int TrxMessage::kTxFreqFieldNumber;
const int TrxMessage::kTxPowerFieldNumber;
const int TrxMessage::kPreselFieldNumber;
const int TrxMessage::kGainFieldNumber;
const int TrxMessage::kPttFieldNumber;
const int TrxMessage::kSettingsFieldNumber;
const int TrxMessage::kPlayFileNameFieldNumber;
const int TrxMessage::kRecordFileNameFieldNumber;
const int TrxMessage::kPlayFileFieldNumber;
const int TrxMessage::kRecordFileFieldNumber;
const int TrxMessage::kKeepAliveFieldNumber;
const int TrxMessage::kReadRawFieldNumber;
const int TrxMessage::kGetFileListFieldNumber;
const int TrxMessage::kFileposFieldNumber;
#endif  // !_MSC_VER

TrxMessage::TrxMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrxMessage::InitAsDefaultInstance() {
}

TrxMessage::TrxMessage(const TrxMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrxMessage::SharedCtor() {
  _cached_size_ = 0;
  audio_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vfo_ = 0u;
  vfoactiv_ = false;
  rxcenterfreq_ = GOOGLE_ULONGLONG(0);
  rxfreq_ = GOOGLE_ULONGLONG(0);
  agc_ = 0u;
  antenne_ = 0u;
  fftsize_ = 0u;
  filterlo_ = 0u;
  filterhi_ = 0u;
  filtercut_ = 0u;
  filternotchbw_ = 0u;
  filternotchfreq_ = 0u;
  notchactiv_ = false;
  preamp_ = 0;
  mode_ = 0u;
  samplerate_ = 0u;
  squelchlevel_ = 0;
  txfreq_ = GOOGLE_ULONGLONG(0);
  txpower_ = 0u;
  presel_ = 0u;
  gain_ = 0u;
  ptt_ = false;
  settings_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recordfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playfile_ = false;
  recordfile_ = false;
  keepalive_ = false;
  readraw_ = false;
  getfilelist_ = false;
  filepos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrxMessage::~TrxMessage() {
  SharedDtor();
}

void TrxMessage::SharedDtor() {
  if (audio_ != &::google::protobuf::internal::kEmptyString) {
    delete audio_;
  }
  if (settings_ != &::google::protobuf::internal::kEmptyString) {
    delete settings_;
  }
  if (playfilename_ != &::google::protobuf::internal::kEmptyString) {
    delete playfilename_;
  }
  if (recordfilename_ != &::google::protobuf::internal::kEmptyString) {
    delete recordfilename_;
  }
  if (this != default_instance_) {
  }
}

void TrxMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrxMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrxMessage_descriptor_;
}

const TrxMessage& TrxMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trx_2eproto();  return *default_instance_;
}

TrxMessage* TrxMessage::default_instance_ = NULL;

TrxMessage* TrxMessage::New() const {
  return new TrxMessage;
}

void TrxMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_audio()) {
      if (audio_ != &::google::protobuf::internal::kEmptyString) {
        audio_->clear();
      }
    }
    vfo_ = 0u;
    vfoactiv_ = false;
    rxcenterfreq_ = GOOGLE_ULONGLONG(0);
    rxfreq_ = GOOGLE_ULONGLONG(0);
    agc_ = 0u;
    antenne_ = 0u;
    fftsize_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    filterlo_ = 0u;
    filterhi_ = 0u;
    filtercut_ = 0u;
    filternotchbw_ = 0u;
    filternotchfreq_ = 0u;
    notchactiv_ = false;
    preamp_ = 0;
    mode_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    samplerate_ = 0u;
    squelchlevel_ = 0;
    txfreq_ = GOOGLE_ULONGLONG(0);
    txpower_ = 0u;
    presel_ = 0u;
    gain_ = 0u;
    ptt_ = false;
    if (has_settings()) {
      if (settings_ != &::google::protobuf::internal::kEmptyString) {
        settings_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_playfilename()) {
      if (playfilename_ != &::google::protobuf::internal::kEmptyString) {
        playfilename_->clear();
      }
    }
    if (has_recordfilename()) {
      if (recordfilename_ != &::google::protobuf::internal::kEmptyString) {
        recordfilename_->clear();
      }
    }
    playfile_ = false;
    recordfile_ = false;
    keepalive_ = false;
    readraw_ = false;
    getfilelist_ = false;
    filepos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrxMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes audio = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vfo;
        break;
      }
      
      // optional uint32 vfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vfo_)));
          set_has_vfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vfoActiv;
        break;
      }
      
      // optional bool vfoActiv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vfoActiv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vfoactiv_)));
          set_has_vfoactiv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rxCenterFreq;
        break;
      }
      
      // optional uint64 rxCenterFreq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxCenterFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rxcenterfreq_)));
          set_has_rxcenterfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rxFreq;
        break;
      }
      
      // optional uint64 rxFreq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rxfreq_)));
          set_has_rxfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_agc;
        break;
      }
      
      // optional uint32 agc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agc_)));
          set_has_agc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_antenne;
        break;
      }
      
      // optional uint32 antenne = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_antenne:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &antenne_)));
          set_has_antenne();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fftSize;
        break;
      }
      
      // optional uint32 fftSize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fftSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fftsize_)));
          set_has_fftsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_filterLo;
        break;
      }
      
      // optional uint32 filterLo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filterLo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filterlo_)));
          set_has_filterlo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_filterHi;
        break;
      }
      
      // optional uint32 filterHi = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filterHi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filterhi_)));
          set_has_filterhi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_filterCut;
        break;
      }
      
      // optional uint32 filterCut = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filterCut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filtercut_)));
          set_has_filtercut();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_filterNotchBW;
        break;
      }
      
      // optional uint32 filterNotchBW = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filterNotchBW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filternotchbw_)));
          set_has_filternotchbw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_filterNotchFreq;
        break;
      }
      
      // optional uint32 filterNotchFreq = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filterNotchFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filternotchfreq_)));
          set_has_filternotchfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_notchActiv;
        break;
      }
      
      // optional bool notchActiv = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notchActiv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notchactiv_)));
          set_has_notchactiv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_preAmp;
        break;
      }
      
      // optional int32 preAmp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preAmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preamp_)));
          set_has_preamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_mode;
        break;
      }
      
      // optional uint32 mode = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_sampleRate;
        break;
      }
      
      // optional uint32 sampleRate = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sampleRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &samplerate_)));
          set_has_samplerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_squelchLevel;
        break;
      }
      
      // optional int32 squelchLevel = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_squelchLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &squelchlevel_)));
          set_has_squelchlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_txFreq;
        break;
      }
      
      // optional uint64 txFreq = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txfreq_)));
          set_has_txfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_txPower;
        break;
      }
      
      // optional uint32 txPower = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txpower_)));
          set_has_txpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_presel;
        break;
      }
      
      // optional uint32 presel = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &presel_)));
          set_has_presel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_gain;
        break;
      }
      
      // optional uint32 gain = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_ptt;
        break;
      }
      
      // optional bool ptt = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ptt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ptt_)));
          set_has_ptt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_settings;
        break;
      }
      
      // optional bytes settings = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_playFileName;
        break;
      }
      
      // optional string playFileName = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playfilename().data(), this->playfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_recordFileName;
        break;
      }
      
      // optional string recordFileName = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recordfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recordfilename().data(), this->recordfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_playFile;
        break;
      }
      
      // optional bool playFile = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playFile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playfile_)));
          set_has_playfile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_recordFile;
        break;
      }
      
      // optional bool recordFile = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordFile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recordfile_)));
          set_has_recordfile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_keepAlive;
        break;
      }
      
      // optional bool keepAlive = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keepAlive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keepalive_)));
          set_has_keepalive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_readRaw;
        break;
      }
      
      // optional bool readRaw = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readRaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &readraw_)));
          set_has_readraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_getFileList;
        break;
      }
      
      // optional bool getFileList = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getFileList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getfilelist_)));
          set_has_getfilelist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_filepos;
        break;
      }
      
      // optional uint32 filepos = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filepos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filepos_)));
          set_has_filepos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrxMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes audio = 1;
  if (has_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->audio(), output);
  }
  
  // optional uint32 vfo = 2;
  if (has_vfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vfo(), output);
  }
  
  // optional bool vfoActiv = 3;
  if (has_vfoactiv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->vfoactiv(), output);
  }
  
  // optional uint64 rxCenterFreq = 4;
  if (has_rxcenterfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->rxcenterfreq(), output);
  }
  
  // optional uint64 rxFreq = 5;
  if (has_rxfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->rxfreq(), output);
  }
  
  // optional uint32 agc = 6;
  if (has_agc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->agc(), output);
  }
  
  // optional uint32 antenne = 7;
  if (has_antenne()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->antenne(), output);
  }
  
  // optional uint32 fftSize = 8;
  if (has_fftsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fftsize(), output);
  }
  
  // optional uint32 filterLo = 9;
  if (has_filterlo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->filterlo(), output);
  }
  
  // optional uint32 filterHi = 10;
  if (has_filterhi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->filterhi(), output);
  }
  
  // optional uint32 filterCut = 11;
  if (has_filtercut()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->filtercut(), output);
  }
  
  // optional uint32 filterNotchBW = 12;
  if (has_filternotchbw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->filternotchbw(), output);
  }
  
  // optional uint32 filterNotchFreq = 13;
  if (has_filternotchfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->filternotchfreq(), output);
  }
  
  // optional bool notchActiv = 14;
  if (has_notchactiv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->notchactiv(), output);
  }
  
  // optional int32 preAmp = 15;
  if (has_preamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->preamp(), output);
  }
  
  // optional uint32 mode = 16;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->mode(), output);
  }
  
  // optional uint32 sampleRate = 17;
  if (has_samplerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->samplerate(), output);
  }
  
  // optional int32 squelchLevel = 18;
  if (has_squelchlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->squelchlevel(), output);
  }
  
  // optional uint64 txFreq = 19;
  if (has_txfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->txfreq(), output);
  }
  
  // optional uint32 txPower = 20;
  if (has_txpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->txpower(), output);
  }
  
  // optional uint32 presel = 21;
  if (has_presel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->presel(), output);
  }
  
  // optional uint32 gain = 22;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->gain(), output);
  }
  
  // optional bool ptt = 23;
  if (has_ptt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->ptt(), output);
  }
  
  // optional bytes settings = 25;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      25, this->settings(), output);
  }
  
  // optional string playFileName = 26;
  if (has_playfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playfilename().data(), this->playfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->playfilename(), output);
  }
  
  // optional string recordFileName = 27;
  if (has_recordfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordfilename().data(), this->recordfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->recordfilename(), output);
  }
  
  // optional bool playFile = 28;
  if (has_playfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->playfile(), output);
  }
  
  // optional bool recordFile = 29;
  if (has_recordfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->recordfile(), output);
  }
  
  // optional bool keepAlive = 30;
  if (has_keepalive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->keepalive(), output);
  }
  
  // optional bool readRaw = 31;
  if (has_readraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->readraw(), output);
  }
  
  // optional bool getFileList = 32;
  if (has_getfilelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->getfilelist(), output);
  }
  
  // optional uint32 filepos = 33;
  if (has_filepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->filepos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrxMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes audio = 1;
  if (has_audio()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->audio(), target);
  }
  
  // optional uint32 vfo = 2;
  if (has_vfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vfo(), target);
  }
  
  // optional bool vfoActiv = 3;
  if (has_vfoactiv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->vfoactiv(), target);
  }
  
  // optional uint64 rxCenterFreq = 4;
  if (has_rxcenterfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->rxcenterfreq(), target);
  }
  
  // optional uint64 rxFreq = 5;
  if (has_rxfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->rxfreq(), target);
  }
  
  // optional uint32 agc = 6;
  if (has_agc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->agc(), target);
  }
  
  // optional uint32 antenne = 7;
  if (has_antenne()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->antenne(), target);
  }
  
  // optional uint32 fftSize = 8;
  if (has_fftsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fftsize(), target);
  }
  
  // optional uint32 filterLo = 9;
  if (has_filterlo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->filterlo(), target);
  }
  
  // optional uint32 filterHi = 10;
  if (has_filterhi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->filterhi(), target);
  }
  
  // optional uint32 filterCut = 11;
  if (has_filtercut()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->filtercut(), target);
  }
  
  // optional uint32 filterNotchBW = 12;
  if (has_filternotchbw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->filternotchbw(), target);
  }
  
  // optional uint32 filterNotchFreq = 13;
  if (has_filternotchfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->filternotchfreq(), target);
  }
  
  // optional bool notchActiv = 14;
  if (has_notchactiv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->notchactiv(), target);
  }
  
  // optional int32 preAmp = 15;
  if (has_preamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->preamp(), target);
  }
  
  // optional uint32 mode = 16;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->mode(), target);
  }
  
  // optional uint32 sampleRate = 17;
  if (has_samplerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->samplerate(), target);
  }
  
  // optional int32 squelchLevel = 18;
  if (has_squelchlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->squelchlevel(), target);
  }
  
  // optional uint64 txFreq = 19;
  if (has_txfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->txfreq(), target);
  }
  
  // optional uint32 txPower = 20;
  if (has_txpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->txpower(), target);
  }
  
  // optional uint32 presel = 21;
  if (has_presel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->presel(), target);
  }
  
  // optional uint32 gain = 22;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->gain(), target);
  }
  
  // optional bool ptt = 23;
  if (has_ptt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->ptt(), target);
  }
  
  // optional bytes settings = 25;
  if (has_settings()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->settings(), target);
  }
  
  // optional string playFileName = 26;
  if (has_playfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playfilename().data(), this->playfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->playfilename(), target);
  }
  
  // optional string recordFileName = 27;
  if (has_recordfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordfilename().data(), this->recordfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->recordfilename(), target);
  }
  
  // optional bool playFile = 28;
  if (has_playfile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->playfile(), target);
  }
  
  // optional bool recordFile = 29;
  if (has_recordfile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->recordfile(), target);
  }
  
  // optional bool keepAlive = 30;
  if (has_keepalive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->keepalive(), target);
  }
  
  // optional bool readRaw = 31;
  if (has_readraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->readraw(), target);
  }
  
  // optional bool getFileList = 32;
  if (has_getfilelist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->getfilelist(), target);
  }
  
  // optional uint32 filepos = 33;
  if (has_filepos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->filepos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrxMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes audio = 1;
    if (has_audio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->audio());
    }
    
    // optional uint32 vfo = 2;
    if (has_vfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vfo());
    }
    
    // optional bool vfoActiv = 3;
    if (has_vfoactiv()) {
      total_size += 1 + 1;
    }
    
    // optional uint64 rxCenterFreq = 4;
    if (has_rxcenterfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rxcenterfreq());
    }
    
    // optional uint64 rxFreq = 5;
    if (has_rxfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rxfreq());
    }
    
    // optional uint32 agc = 6;
    if (has_agc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agc());
    }
    
    // optional uint32 antenne = 7;
    if (has_antenne()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->antenne());
    }
    
    // optional uint32 fftSize = 8;
    if (has_fftsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fftsize());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 filterLo = 9;
    if (has_filterlo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filterlo());
    }
    
    // optional uint32 filterHi = 10;
    if (has_filterhi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filterhi());
    }
    
    // optional uint32 filterCut = 11;
    if (has_filtercut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filtercut());
    }
    
    // optional uint32 filterNotchBW = 12;
    if (has_filternotchbw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filternotchbw());
    }
    
    // optional uint32 filterNotchFreq = 13;
    if (has_filternotchfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filternotchfreq());
    }
    
    // optional bool notchActiv = 14;
    if (has_notchactiv()) {
      total_size += 1 + 1;
    }
    
    // optional int32 preAmp = 15;
    if (has_preamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preamp());
    }
    
    // optional uint32 mode = 16;
    if (has_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 sampleRate = 17;
    if (has_samplerate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->samplerate());
    }
    
    // optional int32 squelchLevel = 18;
    if (has_squelchlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->squelchlevel());
    }
    
    // optional uint64 txFreq = 19;
    if (has_txfreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txfreq());
    }
    
    // optional uint32 txPower = 20;
    if (has_txpower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txpower());
    }
    
    // optional uint32 presel = 21;
    if (has_presel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->presel());
    }
    
    // optional uint32 gain = 22;
    if (has_gain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gain());
    }
    
    // optional bool ptt = 23;
    if (has_ptt()) {
      total_size += 2 + 1;
    }
    
    // optional bytes settings = 25;
    if (has_settings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->settings());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string playFileName = 26;
    if (has_playfilename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playfilename());
    }
    
    // optional string recordFileName = 27;
    if (has_recordfilename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recordfilename());
    }
    
    // optional bool playFile = 28;
    if (has_playfile()) {
      total_size += 2 + 1;
    }
    
    // optional bool recordFile = 29;
    if (has_recordfile()) {
      total_size += 2 + 1;
    }
    
    // optional bool keepAlive = 30;
    if (has_keepalive()) {
      total_size += 2 + 1;
    }
    
    // optional bool readRaw = 31;
    if (has_readraw()) {
      total_size += 2 + 1;
    }
    
    // optional bool getFileList = 32;
    if (has_getfilelist()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 filepos = 33;
    if (has_filepos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filepos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrxMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrxMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrxMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrxMessage::MergeFrom(const TrxMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audio()) {
      set_audio(from.audio());
    }
    if (from.has_vfo()) {
      set_vfo(from.vfo());
    }
    if (from.has_vfoactiv()) {
      set_vfoactiv(from.vfoactiv());
    }
    if (from.has_rxcenterfreq()) {
      set_rxcenterfreq(from.rxcenterfreq());
    }
    if (from.has_rxfreq()) {
      set_rxfreq(from.rxfreq());
    }
    if (from.has_agc()) {
      set_agc(from.agc());
    }
    if (from.has_antenne()) {
      set_antenne(from.antenne());
    }
    if (from.has_fftsize()) {
      set_fftsize(from.fftsize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_filterlo()) {
      set_filterlo(from.filterlo());
    }
    if (from.has_filterhi()) {
      set_filterhi(from.filterhi());
    }
    if (from.has_filtercut()) {
      set_filtercut(from.filtercut());
    }
    if (from.has_filternotchbw()) {
      set_filternotchbw(from.filternotchbw());
    }
    if (from.has_filternotchfreq()) {
      set_filternotchfreq(from.filternotchfreq());
    }
    if (from.has_notchactiv()) {
      set_notchactiv(from.notchactiv());
    }
    if (from.has_preamp()) {
      set_preamp(from.preamp());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_samplerate()) {
      set_samplerate(from.samplerate());
    }
    if (from.has_squelchlevel()) {
      set_squelchlevel(from.squelchlevel());
    }
    if (from.has_txfreq()) {
      set_txfreq(from.txfreq());
    }
    if (from.has_txpower()) {
      set_txpower(from.txpower());
    }
    if (from.has_presel()) {
      set_presel(from.presel());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_ptt()) {
      set_ptt(from.ptt());
    }
    if (from.has_settings()) {
      set_settings(from.settings());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_playfilename()) {
      set_playfilename(from.playfilename());
    }
    if (from.has_recordfilename()) {
      set_recordfilename(from.recordfilename());
    }
    if (from.has_playfile()) {
      set_playfile(from.playfile());
    }
    if (from.has_recordfile()) {
      set_recordfile(from.recordfile());
    }
    if (from.has_keepalive()) {
      set_keepalive(from.keepalive());
    }
    if (from.has_readraw()) {
      set_readraw(from.readraw());
    }
    if (from.has_getfilelist()) {
      set_getfilelist(from.getfilelist());
    }
    if (from.has_filepos()) {
      set_filepos(from.filepos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrxMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrxMessage::CopyFrom(const TrxMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrxMessage::IsInitialized() const {
  
  return true;
}

void TrxMessage::Swap(TrxMessage* other) {
  if (other != this) {
    std::swap(audio_, other->audio_);
    std::swap(vfo_, other->vfo_);
    std::swap(vfoactiv_, other->vfoactiv_);
    std::swap(rxcenterfreq_, other->rxcenterfreq_);
    std::swap(rxfreq_, other->rxfreq_);
    std::swap(agc_, other->agc_);
    std::swap(antenne_, other->antenne_);
    std::swap(fftsize_, other->fftsize_);
    std::swap(filterlo_, other->filterlo_);
    std::swap(filterhi_, other->filterhi_);
    std::swap(filtercut_, other->filtercut_);
    std::swap(filternotchbw_, other->filternotchbw_);
    std::swap(filternotchfreq_, other->filternotchfreq_);
    std::swap(notchactiv_, other->notchactiv_);
    std::swap(preamp_, other->preamp_);
    std::swap(mode_, other->mode_);
    std::swap(samplerate_, other->samplerate_);
    std::swap(squelchlevel_, other->squelchlevel_);
    std::swap(txfreq_, other->txfreq_);
    std::swap(txpower_, other->txpower_);
    std::swap(presel_, other->presel_);
    std::swap(gain_, other->gain_);
    std::swap(ptt_, other->ptt_);
    std::swap(settings_, other->settings_);
    std::swap(playfilename_, other->playfilename_);
    std::swap(recordfilename_, other->recordfilename_);
    std::swap(playfile_, other->playfile_);
    std::swap(recordfile_, other->recordfile_);
    std::swap(keepalive_, other->keepalive_);
    std::swap(readraw_, other->readraw_);
    std::swap(getfilelist_, other->getfilelist_);
    std::swap(filepos_, other->filepos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrxMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrxMessage_descriptor_;
  metadata.reflection = TrxMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuiMessage::kAudioFieldNumber;
const int GuiMessage::kRssiFieldNumber;
const int GuiMessage::kFftFieldNumber;
const int GuiMessage::kDisplayTextFieldNumber;
const int GuiMessage::kRestartIndFieldNumber;
const int GuiMessage::kKeyFieldNumber;
const int GuiMessage::kFilesFieldNumber;
const int GuiMessage::kPlayFileLenFieldNumber;
const int GuiMessage::kPlayFilePosFieldNumber;
#endif  // !_MSC_VER

GuiMessage::GuiMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuiMessage::InitAsDefaultInstance() {
}

GuiMessage::GuiMessage(const GuiMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuiMessage::SharedCtor() {
  _cached_size_ = 0;
  audio_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rssi_ = 0;
  fft_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  displaytext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  restartind_ = false;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playfilelen_ = GOOGLE_ULONGLONG(0);
  playfilepos_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuiMessage::~GuiMessage() {
  SharedDtor();
}

void GuiMessage::SharedDtor() {
  if (audio_ != &::google::protobuf::internal::kEmptyString) {
    delete audio_;
  }
  if (fft_ != &::google::protobuf::internal::kEmptyString) {
    delete fft_;
  }
  if (displaytext_ != &::google::protobuf::internal::kEmptyString) {
    delete displaytext_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void GuiMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuiMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuiMessage_descriptor_;
}

const GuiMessage& GuiMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trx_2eproto();  return *default_instance_;
}

GuiMessage* GuiMessage::default_instance_ = NULL;

GuiMessage* GuiMessage::New() const {
  return new GuiMessage;
}

void GuiMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_audio()) {
      if (audio_ != &::google::protobuf::internal::kEmptyString) {
        audio_->clear();
      }
    }
    rssi_ = 0;
    if (has_fft()) {
      if (fft_ != &::google::protobuf::internal::kEmptyString) {
        fft_->clear();
      }
    }
    if (has_displaytext()) {
      if (displaytext_ != &::google::protobuf::internal::kEmptyString) {
        displaytext_->clear();
      }
    }
    restartind_ = false;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    playfilelen_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    playfilepos_ = GOOGLE_ULONGLONG(0);
  }
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuiMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes audio = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_rssi;
        break;
      }
      
      // optional float rssi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rssi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rssi_)));
          set_has_rssi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fft;
        break;
      }
      
      // optional bytes fft = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fft:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fft()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_displayText;
        break;
      }
      
      // optional bytes displayText = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displayText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_displaytext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_restartInd;
        break;
      }
      
      // optional bool restartInd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restartInd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &restartind_)));
          set_has_restartind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_key;
        break;
      }
      
      // optional bytes key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_files;
        break;
      }
      
      // repeated string files = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_files()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->files(0).data(), this->files(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_files;
        if (input->ExpectTag(64)) goto parse_playFileLen;
        break;
      }
      
      // optional uint64 playFileLen = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playFileLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playfilelen_)));
          set_has_playfilelen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_playFilePos;
        break;
      }
      
      // optional uint64 playFilePos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playFilePos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playfilepos_)));
          set_has_playfilepos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuiMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes audio = 1;
  if (has_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->audio(), output);
  }
  
  // optional float rssi = 2;
  if (has_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rssi(), output);
  }
  
  // optional bytes fft = 3;
  if (has_fft()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->fft(), output);
  }
  
  // optional bytes displayText = 4;
  if (has_displaytext()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->displaytext(), output);
  }
  
  // optional bool restartInd = 5;
  if (has_restartind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->restartind(), output);
  }
  
  // optional bytes key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->key(), output);
  }
  
  // repeated string files = 7;
  for (int i = 0; i < this->files_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->files(i).data(), this->files(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->files(i), output);
  }
  
  // optional uint64 playFileLen = 8;
  if (has_playfilelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->playfilelen(), output);
  }
  
  // optional uint64 playFilePos = 9;
  if (has_playfilepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->playfilepos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuiMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes audio = 1;
  if (has_audio()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->audio(), target);
  }
  
  // optional float rssi = 2;
  if (has_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rssi(), target);
  }
  
  // optional bytes fft = 3;
  if (has_fft()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->fft(), target);
  }
  
  // optional bytes displayText = 4;
  if (has_displaytext()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->displaytext(), target);
  }
  
  // optional bool restartInd = 5;
  if (has_restartind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->restartind(), target);
  }
  
  // optional bytes key = 6;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->key(), target);
  }
  
  // repeated string files = 7;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->files(i).data(), this->files(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->files(i), target);
  }
  
  // optional uint64 playFileLen = 8;
  if (has_playfilelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->playfilelen(), target);
  }
  
  // optional uint64 playFilePos = 9;
  if (has_playfilepos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->playfilepos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuiMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes audio = 1;
    if (has_audio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->audio());
    }
    
    // optional float rssi = 2;
    if (has_rssi()) {
      total_size += 1 + 4;
    }
    
    // optional bytes fft = 3;
    if (has_fft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fft());
    }
    
    // optional bytes displayText = 4;
    if (has_displaytext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->displaytext());
    }
    
    // optional bool restartInd = 5;
    if (has_restartind()) {
      total_size += 1 + 1;
    }
    
    // optional bytes key = 6;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // optional uint64 playFileLen = 8;
    if (has_playfilelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playfilelen());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 playFilePos = 9;
    if (has_playfilepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playfilepos());
    }
    
  }
  // repeated string files = 7;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->files(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuiMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuiMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuiMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuiMessage::MergeFrom(const GuiMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  files_.MergeFrom(from.files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audio()) {
      set_audio(from.audio());
    }
    if (from.has_rssi()) {
      set_rssi(from.rssi());
    }
    if (from.has_fft()) {
      set_fft(from.fft());
    }
    if (from.has_displaytext()) {
      set_displaytext(from.displaytext());
    }
    if (from.has_restartind()) {
      set_restartind(from.restartind());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_playfilelen()) {
      set_playfilelen(from.playfilelen());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playfilepos()) {
      set_playfilepos(from.playfilepos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuiMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuiMessage::CopyFrom(const GuiMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuiMessage::IsInitialized() const {
  
  return true;
}

void GuiMessage::Swap(GuiMessage* other) {
  if (other != this) {
    std::swap(audio_, other->audio_);
    std::swap(rssi_, other->rssi_);
    std::swap(fft_, other->fft_);
    std::swap(displaytext_, other->displaytext_);
    std::swap(restartind_, other->restartind_);
    std::swap(key_, other->key_);
    files_.Swap(&other->files_);
    std::swap(playfilelen_, other->playfilelen_);
    std::swap(playfilepos_, other->playfilepos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuiMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuiMessage_descriptor_;
  metadata.reflection = GuiMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TrxProto

// @@protoc_insertion_point(global_scope)

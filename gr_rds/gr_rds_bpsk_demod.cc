/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef DEBUG
#define DBG(x) x 
#else
#define DBG(x)
#endif

#include <gr_rds_bpsk_demod.h>
#include <gnuradio/io_signature.h>

#include <fstream>

#define sign(n) (n>0 ? 1:-1)

/*
 * Create a new instance of gr_rds_bpsk_demod and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
gr_rds_bpsk_demod_sptr gr_rds_make_bpsk_demod (double sampling_rate)
{
	return gr_rds_bpsk_demod_sptr (new gr_rds_bpsk_demod (sampling_rate));
}

/*
 * The private constructor
 */
gr_rds_bpsk_demod::gr_rds_bpsk_demod (double input_sampling_rate)
	: gr::block("gr_rds_bpsk_demod",
			gr::io_signature::make (2, 2, sizeof(float)),
			gr::io_signature::make (1, 8, sizeof(bool)))
{
	SYMBOL_LENGTH = (int)(input_sampling_rate/1187.5);

/* set approximate output_rate/input_rate
 * for the buffer allocator and the scheduler */
	set_relative_rate(1.0/SYMBOL_LENGTH);
	reset(0);
}

/*
 * Our virtual destructor.
 */
gr_rds_bpsk_demod::~gr_rds_bpsk_demod (){
}

void gr_rds_bpsk_demod::reset(int r) {
	d_zc = 0;
	d_last_zc=0;
	d_sign_last = 0;
	d_symbol_integrator = 0;
	d_sign_last = 0;
	av_clock = 0;
	sign = -1;
	printf ("bpsk reset\n");
}


////////////////////////////////////////////////////////////////
int gr_rds_bpsk_demod::general_work (int noutput_items,
					gr_vector_int &ninput_items,
					gr_vector_const_void_star &input_items,
					gr_vector_void_star &output_items)
{
	const float *in = (const float *) input_items[0];
	const float *clk = (const float *) input_items[1];
	bool *out = (bool *) output_items[0];
	int n_in = ninput_items[0];
	int n_clk_in = ninput_items[1];
	int i = 0;
	int nout = 0;
	int sign_current = 0;
	int sig;
	int sign_sig,sign_sig_last;

	if(d_sign_last == 0) 
		d_sign_last = (clk[0] >0?1:-1);

	for(i=0; (i<n_in) && (i<n_clk_in); i++) {
		//			printf("%f %f\n",in[i],clk[i]);
		sign_current = (clk[i] > 0 ? 1:-1);

		// 
		sign_sig = (in[i]>0 ? 1:-1);
		if (sign_sig == sign_sig_last)
			sig++;
		else {
			if (sig > 35 && sig < 45) {
				av_clock += clk[i];
				if (av_clock < -20) {
					av_clock = 0;
					sign = 1;
				}
			}
			sig=0;
		}
		sign_sig_last = sign_sig;

		if(sign_current != d_sign_last) 
			d_zc++; // a zero cross in clk
		d_sign_last = sign_current;

		d_symbol_integrator += (in[i]*clk[i]);
		if(d_zc >= 2) {
			// Two zero crossings in clock - that's a symbol
			out[nout] = (d_symbol_integrator>0?1:0);
			nout++;
			d_symbol_integrator = 0;
			if (sign_current == sign)
				d_zc = 0;
		}
	}
	consume_each (i);
	return nout; 
}

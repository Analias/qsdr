// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trx.proto

#ifndef PROTOBUF_trx_2eproto__INCLUDED
#define PROTOBUF_trx_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace TrxProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_trx_2eproto();
void protobuf_AssignDesc_trx_2eproto();
void protobuf_ShutdownFile_trx_2eproto();

class TrxMessage;
class GuiMessage;

// ===================================================================

class TrxMessage : public ::google::protobuf::Message {
 public:
  TrxMessage();
  virtual ~TrxMessage();
  
  TrxMessage(const TrxMessage& from);
  
  inline TrxMessage& operator=(const TrxMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrxMessage& default_instance();
  
  void Swap(TrxMessage* other);
  
  // implements Message ----------------------------------------------
  
  TrxMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrxMessage& from);
  void MergeFrom(const TrxMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes audio = 1;
  inline bool has_audio() const;
  inline void clear_audio();
  static const int kAudioFieldNumber = 1;
  inline const ::std::string& audio() const;
  inline void set_audio(const ::std::string& value);
  inline void set_audio(const char* value);
  inline void set_audio(const void* value, size_t size);
  inline ::std::string* mutable_audio();
  inline ::std::string* release_audio();
  
  // optional uint32 vfo = 2;
  inline bool has_vfo() const;
  inline void clear_vfo();
  static const int kVfoFieldNumber = 2;
  inline ::google::protobuf::uint32 vfo() const;
  inline void set_vfo(::google::protobuf::uint32 value);
  
  // optional bool vfoActiv = 3;
  inline bool has_vfoactiv() const;
  inline void clear_vfoactiv();
  static const int kVfoActivFieldNumber = 3;
  inline bool vfoactiv() const;
  inline void set_vfoactiv(bool value);
  
  // optional uint64 rxCenterFreq = 4;
  inline bool has_rxcenterfreq() const;
  inline void clear_rxcenterfreq();
  static const int kRxCenterFreqFieldNumber = 4;
  inline ::google::protobuf::uint64 rxcenterfreq() const;
  inline void set_rxcenterfreq(::google::protobuf::uint64 value);
  
  // optional uint64 rxFreq = 5;
  inline bool has_rxfreq() const;
  inline void clear_rxfreq();
  static const int kRxFreqFieldNumber = 5;
  inline ::google::protobuf::uint64 rxfreq() const;
  inline void set_rxfreq(::google::protobuf::uint64 value);
  
  // optional uint32 agc = 6;
  inline bool has_agc() const;
  inline void clear_agc();
  static const int kAgcFieldNumber = 6;
  inline ::google::protobuf::uint32 agc() const;
  inline void set_agc(::google::protobuf::uint32 value);
  
  // optional uint32 antenne = 7;
  inline bool has_antenne() const;
  inline void clear_antenne();
  static const int kAntenneFieldNumber = 7;
  inline ::google::protobuf::uint32 antenne() const;
  inline void set_antenne(::google::protobuf::uint32 value);
  
  // optional uint32 fftSize = 8;
  inline bool has_fftsize() const;
  inline void clear_fftsize();
  static const int kFftSizeFieldNumber = 8;
  inline ::google::protobuf::uint32 fftsize() const;
  inline void set_fftsize(::google::protobuf::uint32 value);
  
  // optional uint32 filterLo = 9;
  inline bool has_filterlo() const;
  inline void clear_filterlo();
  static const int kFilterLoFieldNumber = 9;
  inline ::google::protobuf::uint32 filterlo() const;
  inline void set_filterlo(::google::protobuf::uint32 value);
  
  // optional uint32 filterHi = 10;
  inline bool has_filterhi() const;
  inline void clear_filterhi();
  static const int kFilterHiFieldNumber = 10;
  inline ::google::protobuf::uint32 filterhi() const;
  inline void set_filterhi(::google::protobuf::uint32 value);
  
  // optional uint32 filterCut = 11;
  inline bool has_filtercut() const;
  inline void clear_filtercut();
  static const int kFilterCutFieldNumber = 11;
  inline ::google::protobuf::uint32 filtercut() const;
  inline void set_filtercut(::google::protobuf::uint32 value);
  
  // optional uint32 filterNotchBW = 12;
  inline bool has_filternotchbw() const;
  inline void clear_filternotchbw();
  static const int kFilterNotchBWFieldNumber = 12;
  inline ::google::protobuf::uint32 filternotchbw() const;
  inline void set_filternotchbw(::google::protobuf::uint32 value);
  
  // optional uint32 filterNotchFreq = 13;
  inline bool has_filternotchfreq() const;
  inline void clear_filternotchfreq();
  static const int kFilterNotchFreqFieldNumber = 13;
  inline ::google::protobuf::uint32 filternotchfreq() const;
  inline void set_filternotchfreq(::google::protobuf::uint32 value);
  
  // optional bool notchActiv = 14;
  inline bool has_notchactiv() const;
  inline void clear_notchactiv();
  static const int kNotchActivFieldNumber = 14;
  inline bool notchactiv() const;
  inline void set_notchactiv(bool value);
  
  // optional int32 preAmp = 15;
  inline bool has_preamp() const;
  inline void clear_preamp();
  static const int kPreAmpFieldNumber = 15;
  inline ::google::protobuf::int32 preamp() const;
  inline void set_preamp(::google::protobuf::int32 value);
  
  // optional uint32 mode = 16;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 16;
  inline ::google::protobuf::uint32 mode() const;
  inline void set_mode(::google::protobuf::uint32 value);
  
  // optional uint32 sampleRate = 17;
  inline bool has_samplerate() const;
  inline void clear_samplerate();
  static const int kSampleRateFieldNumber = 17;
  inline ::google::protobuf::uint32 samplerate() const;
  inline void set_samplerate(::google::protobuf::uint32 value);
  
  // optional int32 squelchLevel = 18;
  inline bool has_squelchlevel() const;
  inline void clear_squelchlevel();
  static const int kSquelchLevelFieldNumber = 18;
  inline ::google::protobuf::int32 squelchlevel() const;
  inline void set_squelchlevel(::google::protobuf::int32 value);
  
  // optional uint64 txFreq = 19;
  inline bool has_txfreq() const;
  inline void clear_txfreq();
  static const int kTxFreqFieldNumber = 19;
  inline ::google::protobuf::uint64 txfreq() const;
  inline void set_txfreq(::google::protobuf::uint64 value);
  
  // optional uint32 txPower = 20;
  inline bool has_txpower() const;
  inline void clear_txpower();
  static const int kTxPowerFieldNumber = 20;
  inline ::google::protobuf::uint32 txpower() const;
  inline void set_txpower(::google::protobuf::uint32 value);
  
  // optional uint32 presel = 21;
  inline bool has_presel() const;
  inline void clear_presel();
  static const int kPreselFieldNumber = 21;
  inline ::google::protobuf::uint32 presel() const;
  inline void set_presel(::google::protobuf::uint32 value);
  
  // optional uint32 gain = 22;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 22;
  inline ::google::protobuf::uint32 gain() const;
  inline void set_gain(::google::protobuf::uint32 value);
  
  // optional bool ptt = 23;
  inline bool has_ptt() const;
  inline void clear_ptt();
  static const int kPttFieldNumber = 23;
  inline bool ptt() const;
  inline void set_ptt(bool value);
  
  // optional bytes settings = 25;
  inline bool has_settings() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 25;
  inline const ::std::string& settings() const;
  inline void set_settings(const ::std::string& value);
  inline void set_settings(const char* value);
  inline void set_settings(const void* value, size_t size);
  inline ::std::string* mutable_settings();
  inline ::std::string* release_settings();
  
  // optional string playFileName = 26;
  inline bool has_playfilename() const;
  inline void clear_playfilename();
  static const int kPlayFileNameFieldNumber = 26;
  inline const ::std::string& playfilename() const;
  inline void set_playfilename(const ::std::string& value);
  inline void set_playfilename(const char* value);
  inline void set_playfilename(const char* value, size_t size);
  inline ::std::string* mutable_playfilename();
  inline ::std::string* release_playfilename();
  
  // optional string recordFileName = 27;
  inline bool has_recordfilename() const;
  inline void clear_recordfilename();
  static const int kRecordFileNameFieldNumber = 27;
  inline const ::std::string& recordfilename() const;
  inline void set_recordfilename(const ::std::string& value);
  inline void set_recordfilename(const char* value);
  inline void set_recordfilename(const char* value, size_t size);
  inline ::std::string* mutable_recordfilename();
  inline ::std::string* release_recordfilename();
  
  // optional bool playFile = 28;
  inline bool has_playfile() const;
  inline void clear_playfile();
  static const int kPlayFileFieldNumber = 28;
  inline bool playfile() const;
  inline void set_playfile(bool value);
  
  // optional bool recordFile = 29;
  inline bool has_recordfile() const;
  inline void clear_recordfile();
  static const int kRecordFileFieldNumber = 29;
  inline bool recordfile() const;
  inline void set_recordfile(bool value);
  
  // optional bool keepAlive = 30;
  inline bool has_keepalive() const;
  inline void clear_keepalive();
  static const int kKeepAliveFieldNumber = 30;
  inline bool keepalive() const;
  inline void set_keepalive(bool value);
  
  // optional bool readRaw = 31;
  inline bool has_readraw() const;
  inline void clear_readraw();
  static const int kReadRawFieldNumber = 31;
  inline bool readraw() const;
  inline void set_readraw(bool value);
  
  // optional bool getFileList = 32;
  inline bool has_getfilelist() const;
  inline void clear_getfilelist();
  static const int kGetFileListFieldNumber = 32;
  inline bool getfilelist() const;
  inline void set_getfilelist(bool value);
  
  // optional uint32 filepos = 33;
  inline bool has_filepos() const;
  inline void clear_filepos();
  static const int kFileposFieldNumber = 33;
  inline ::google::protobuf::uint32 filepos() const;
  inline void set_filepos(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:TrxProto.TrxMessage)
 private:
  inline void set_has_audio();
  inline void clear_has_audio();
  inline void set_has_vfo();
  inline void clear_has_vfo();
  inline void set_has_vfoactiv();
  inline void clear_has_vfoactiv();
  inline void set_has_rxcenterfreq();
  inline void clear_has_rxcenterfreq();
  inline void set_has_rxfreq();
  inline void clear_has_rxfreq();
  inline void set_has_agc();
  inline void clear_has_agc();
  inline void set_has_antenne();
  inline void clear_has_antenne();
  inline void set_has_fftsize();
  inline void clear_has_fftsize();
  inline void set_has_filterlo();
  inline void clear_has_filterlo();
  inline void set_has_filterhi();
  inline void clear_has_filterhi();
  inline void set_has_filtercut();
  inline void clear_has_filtercut();
  inline void set_has_filternotchbw();
  inline void clear_has_filternotchbw();
  inline void set_has_filternotchfreq();
  inline void clear_has_filternotchfreq();
  inline void set_has_notchactiv();
  inline void clear_has_notchactiv();
  inline void set_has_preamp();
  inline void clear_has_preamp();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_samplerate();
  inline void clear_has_samplerate();
  inline void set_has_squelchlevel();
  inline void clear_has_squelchlevel();
  inline void set_has_txfreq();
  inline void clear_has_txfreq();
  inline void set_has_txpower();
  inline void clear_has_txpower();
  inline void set_has_presel();
  inline void clear_has_presel();
  inline void set_has_gain();
  inline void clear_has_gain();
  inline void set_has_ptt();
  inline void clear_has_ptt();
  inline void set_has_settings();
  inline void clear_has_settings();
  inline void set_has_playfilename();
  inline void clear_has_playfilename();
  inline void set_has_recordfilename();
  inline void clear_has_recordfilename();
  inline void set_has_playfile();
  inline void clear_has_playfile();
  inline void set_has_recordfile();
  inline void clear_has_recordfile();
  inline void set_has_keepalive();
  inline void clear_has_keepalive();
  inline void set_has_readraw();
  inline void clear_has_readraw();
  inline void set_has_getfilelist();
  inline void clear_has_getfilelist();
  inline void set_has_filepos();
  inline void clear_has_filepos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* audio_;
  ::google::protobuf::uint64 rxcenterfreq_;
  ::google::protobuf::uint32 vfo_;
  ::google::protobuf::uint32 agc_;
  ::google::protobuf::uint64 rxfreq_;
  ::google::protobuf::uint32 antenne_;
  ::google::protobuf::uint32 fftsize_;
  ::google::protobuf::uint32 filterlo_;
  ::google::protobuf::uint32 filterhi_;
  ::google::protobuf::uint32 filtercut_;
  ::google::protobuf::uint32 filternotchbw_;
  ::google::protobuf::uint32 filternotchfreq_;
  ::google::protobuf::int32 preamp_;
  ::google::protobuf::uint32 mode_;
  bool vfoactiv_;
  bool notchactiv_;
  bool ptt_;
  bool playfile_;
  ::google::protobuf::uint32 samplerate_;
  ::google::protobuf::int32 squelchlevel_;
  ::google::protobuf::uint64 txfreq_;
  ::google::protobuf::uint32 txpower_;
  ::google::protobuf::uint32 presel_;
  ::std::string* settings_;
  ::std::string* playfilename_;
  ::std::string* recordfilename_;
  ::google::protobuf::uint32 gain_;
  bool recordfile_;
  bool keepalive_;
  bool readraw_;
  bool getfilelist_;
  ::google::protobuf::uint32 filepos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];
  
  friend void  protobuf_AddDesc_trx_2eproto();
  friend void protobuf_AssignDesc_trx_2eproto();
  friend void protobuf_ShutdownFile_trx_2eproto();
  
  void InitAsDefaultInstance();
  static TrxMessage* default_instance_;
};
// -------------------------------------------------------------------

class GuiMessage : public ::google::protobuf::Message {
 public:
  GuiMessage();
  virtual ~GuiMessage();
  
  GuiMessage(const GuiMessage& from);
  
  inline GuiMessage& operator=(const GuiMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuiMessage& default_instance();
  
  void Swap(GuiMessage* other);
  
  // implements Message ----------------------------------------------
  
  GuiMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuiMessage& from);
  void MergeFrom(const GuiMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes audio = 1;
  inline bool has_audio() const;
  inline void clear_audio();
  static const int kAudioFieldNumber = 1;
  inline const ::std::string& audio() const;
  inline void set_audio(const ::std::string& value);
  inline void set_audio(const char* value);
  inline void set_audio(const void* value, size_t size);
  inline ::std::string* mutable_audio();
  inline ::std::string* release_audio();
  
  // optional float rssi = 2;
  inline bool has_rssi() const;
  inline void clear_rssi();
  static const int kRssiFieldNumber = 2;
  inline float rssi() const;
  inline void set_rssi(float value);
  
  // optional bytes fft = 3;
  inline bool has_fft() const;
  inline void clear_fft();
  static const int kFftFieldNumber = 3;
  inline const ::std::string& fft() const;
  inline void set_fft(const ::std::string& value);
  inline void set_fft(const char* value);
  inline void set_fft(const void* value, size_t size);
  inline ::std::string* mutable_fft();
  inline ::std::string* release_fft();
  
  // optional bytes displayText = 4;
  inline bool has_displaytext() const;
  inline void clear_displaytext();
  static const int kDisplayTextFieldNumber = 4;
  inline const ::std::string& displaytext() const;
  inline void set_displaytext(const ::std::string& value);
  inline void set_displaytext(const char* value);
  inline void set_displaytext(const void* value, size_t size);
  inline ::std::string* mutable_displaytext();
  inline ::std::string* release_displaytext();
  
  // optional bool restartInd = 5;
  inline bool has_restartind() const;
  inline void clear_restartind();
  static const int kRestartIndFieldNumber = 5;
  inline bool restartind() const;
  inline void set_restartind(bool value);
  
  // optional bytes key = 6;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 6;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // repeated string files = 7;
  inline int files_size() const;
  inline void clear_files();
  static const int kFilesFieldNumber = 7;
  inline const ::std::string& files(int index) const;
  inline ::std::string* mutable_files(int index);
  inline void set_files(int index, const ::std::string& value);
  inline void set_files(int index, const char* value);
  inline void set_files(int index, const char* value, size_t size);
  inline ::std::string* add_files();
  inline void add_files(const ::std::string& value);
  inline void add_files(const char* value);
  inline void add_files(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& files() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_files();
  
  // optional uint64 playFileLen = 8;
  inline bool has_playfilelen() const;
  inline void clear_playfilelen();
  static const int kPlayFileLenFieldNumber = 8;
  inline ::google::protobuf::uint64 playfilelen() const;
  inline void set_playfilelen(::google::protobuf::uint64 value);
  
  // optional uint64 playFilePos = 9;
  inline bool has_playfilepos() const;
  inline void clear_playfilepos();
  static const int kPlayFilePosFieldNumber = 9;
  inline ::google::protobuf::uint64 playfilepos() const;
  inline void set_playfilepos(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:TrxProto.GuiMessage)
 private:
  inline void set_has_audio();
  inline void clear_has_audio();
  inline void set_has_rssi();
  inline void clear_has_rssi();
  inline void set_has_fft();
  inline void clear_has_fft();
  inline void set_has_displaytext();
  inline void clear_has_displaytext();
  inline void set_has_restartind();
  inline void clear_has_restartind();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_playfilelen();
  inline void clear_has_playfilelen();
  inline void set_has_playfilepos();
  inline void clear_has_playfilepos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* audio_;
  ::std::string* fft_;
  float rssi_;
  bool restartind_;
  ::std::string* displaytext_;
  ::std::string* key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> files_;
  ::google::protobuf::uint64 playfilelen_;
  ::google::protobuf::uint64 playfilepos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_trx_2eproto();
  friend void protobuf_AssignDesc_trx_2eproto();
  friend void protobuf_ShutdownFile_trx_2eproto();
  
  void InitAsDefaultInstance();
  static GuiMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// TrxMessage

// optional bytes audio = 1;
inline bool TrxMessage::has_audio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrxMessage::set_has_audio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrxMessage::clear_has_audio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrxMessage::clear_audio() {
  if (audio_ != &::google::protobuf::internal::kEmptyString) {
    audio_->clear();
  }
  clear_has_audio();
}
inline const ::std::string& TrxMessage::audio() const {
  return *audio_;
}
inline void TrxMessage::set_audio(const ::std::string& value) {
  set_has_audio();
  if (audio_ == &::google::protobuf::internal::kEmptyString) {
    audio_ = new ::std::string;
  }
  audio_->assign(value);
}
inline void TrxMessage::set_audio(const char* value) {
  set_has_audio();
  if (audio_ == &::google::protobuf::internal::kEmptyString) {
    audio_ = new ::std::string;
  }
  audio_->assign(value);
}
inline void TrxMessage::set_audio(const void* value, size_t size) {
  set_has_audio();
  if (audio_ == &::google::protobuf::internal::kEmptyString) {
    audio_ = new ::std::string;
  }
  audio_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrxMessage::mutable_audio() {
  set_has_audio();
  if (audio_ == &::google::protobuf::internal::kEmptyString) {
    audio_ = new ::std::string;
  }
  return audio_;
}
inline ::std::string* TrxMessage::release_audio() {
  clear_has_audio();
  if (audio_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = audio_;
    audio_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 vfo = 2;
inline bool TrxMessage::has_vfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrxMessage::set_has_vfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrxMessage::clear_has_vfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrxMessage::clear_vfo() {
  vfo_ = 0u;
  clear_has_vfo();
}
inline ::google::protobuf::uint32 TrxMessage::vfo() const {
  return vfo_;
}
inline void TrxMessage::set_vfo(::google::protobuf::uint32 value) {
  set_has_vfo();
  vfo_ = value;
}

// optional bool vfoActiv = 3;
inline bool TrxMessage::has_vfoactiv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrxMessage::set_has_vfoactiv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrxMessage::clear_has_vfoactiv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrxMessage::clear_vfoactiv() {
  vfoactiv_ = false;
  clear_has_vfoactiv();
}
inline bool TrxMessage::vfoactiv() const {
  return vfoactiv_;
}
inline void TrxMessage::set_vfoactiv(bool value) {
  set_has_vfoactiv();
  vfoactiv_ = value;
}

// optional uint64 rxCenterFreq = 4;
inline bool TrxMessage::has_rxcenterfreq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrxMessage::set_has_rxcenterfreq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrxMessage::clear_has_rxcenterfreq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrxMessage::clear_rxcenterfreq() {
  rxcenterfreq_ = GOOGLE_ULONGLONG(0);
  clear_has_rxcenterfreq();
}
inline ::google::protobuf::uint64 TrxMessage::rxcenterfreq() const {
  return rxcenterfreq_;
}
inline void TrxMessage::set_rxcenterfreq(::google::protobuf::uint64 value) {
  set_has_rxcenterfreq();
  rxcenterfreq_ = value;
}

// optional uint64 rxFreq = 5;
inline bool TrxMessage::has_rxfreq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrxMessage::set_has_rxfreq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrxMessage::clear_has_rxfreq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrxMessage::clear_rxfreq() {
  rxfreq_ = GOOGLE_ULONGLONG(0);
  clear_has_rxfreq();
}
inline ::google::protobuf::uint64 TrxMessage::rxfreq() const {
  return rxfreq_;
}
inline void TrxMessage::set_rxfreq(::google::protobuf::uint64 value) {
  set_has_rxfreq();
  rxfreq_ = value;
}

// optional uint32 agc = 6;
inline bool TrxMessage::has_agc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrxMessage::set_has_agc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrxMessage::clear_has_agc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrxMessage::clear_agc() {
  agc_ = 0u;
  clear_has_agc();
}
inline ::google::protobuf::uint32 TrxMessage::agc() const {
  return agc_;
}
inline void TrxMessage::set_agc(::google::protobuf::uint32 value) {
  set_has_agc();
  agc_ = value;
}

// optional uint32 antenne = 7;
inline bool TrxMessage::has_antenne() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrxMessage::set_has_antenne() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrxMessage::clear_has_antenne() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrxMessage::clear_antenne() {
  antenne_ = 0u;
  clear_has_antenne();
}
inline ::google::protobuf::uint32 TrxMessage::antenne() const {
  return antenne_;
}
inline void TrxMessage::set_antenne(::google::protobuf::uint32 value) {
  set_has_antenne();
  antenne_ = value;
}

// optional uint32 fftSize = 8;
inline bool TrxMessage::has_fftsize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrxMessage::set_has_fftsize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrxMessage::clear_has_fftsize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrxMessage::clear_fftsize() {
  fftsize_ = 0u;
  clear_has_fftsize();
}
inline ::google::protobuf::uint32 TrxMessage::fftsize() const {
  return fftsize_;
}
inline void TrxMessage::set_fftsize(::google::protobuf::uint32 value) {
  set_has_fftsize();
  fftsize_ = value;
}

// optional uint32 filterLo = 9;
inline bool TrxMessage::has_filterlo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrxMessage::set_has_filterlo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrxMessage::clear_has_filterlo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrxMessage::clear_filterlo() {
  filterlo_ = 0u;
  clear_has_filterlo();
}
inline ::google::protobuf::uint32 TrxMessage::filterlo() const {
  return filterlo_;
}
inline void TrxMessage::set_filterlo(::google::protobuf::uint32 value) {
  set_has_filterlo();
  filterlo_ = value;
}

// optional uint32 filterHi = 10;
inline bool TrxMessage::has_filterhi() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrxMessage::set_has_filterhi() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TrxMessage::clear_has_filterhi() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TrxMessage::clear_filterhi() {
  filterhi_ = 0u;
  clear_has_filterhi();
}
inline ::google::protobuf::uint32 TrxMessage::filterhi() const {
  return filterhi_;
}
inline void TrxMessage::set_filterhi(::google::protobuf::uint32 value) {
  set_has_filterhi();
  filterhi_ = value;
}

// optional uint32 filterCut = 11;
inline bool TrxMessage::has_filtercut() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TrxMessage::set_has_filtercut() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TrxMessage::clear_has_filtercut() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TrxMessage::clear_filtercut() {
  filtercut_ = 0u;
  clear_has_filtercut();
}
inline ::google::protobuf::uint32 TrxMessage::filtercut() const {
  return filtercut_;
}
inline void TrxMessage::set_filtercut(::google::protobuf::uint32 value) {
  set_has_filtercut();
  filtercut_ = value;
}

// optional uint32 filterNotchBW = 12;
inline bool TrxMessage::has_filternotchbw() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TrxMessage::set_has_filternotchbw() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TrxMessage::clear_has_filternotchbw() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TrxMessage::clear_filternotchbw() {
  filternotchbw_ = 0u;
  clear_has_filternotchbw();
}
inline ::google::protobuf::uint32 TrxMessage::filternotchbw() const {
  return filternotchbw_;
}
inline void TrxMessage::set_filternotchbw(::google::protobuf::uint32 value) {
  set_has_filternotchbw();
  filternotchbw_ = value;
}

// optional uint32 filterNotchFreq = 13;
inline bool TrxMessage::has_filternotchfreq() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TrxMessage::set_has_filternotchfreq() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TrxMessage::clear_has_filternotchfreq() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TrxMessage::clear_filternotchfreq() {
  filternotchfreq_ = 0u;
  clear_has_filternotchfreq();
}
inline ::google::protobuf::uint32 TrxMessage::filternotchfreq() const {
  return filternotchfreq_;
}
inline void TrxMessage::set_filternotchfreq(::google::protobuf::uint32 value) {
  set_has_filternotchfreq();
  filternotchfreq_ = value;
}

// optional bool notchActiv = 14;
inline bool TrxMessage::has_notchactiv() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TrxMessage::set_has_notchactiv() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TrxMessage::clear_has_notchactiv() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TrxMessage::clear_notchactiv() {
  notchactiv_ = false;
  clear_has_notchactiv();
}
inline bool TrxMessage::notchactiv() const {
  return notchactiv_;
}
inline void TrxMessage::set_notchactiv(bool value) {
  set_has_notchactiv();
  notchactiv_ = value;
}

// optional int32 preAmp = 15;
inline bool TrxMessage::has_preamp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TrxMessage::set_has_preamp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TrxMessage::clear_has_preamp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TrxMessage::clear_preamp() {
  preamp_ = 0;
  clear_has_preamp();
}
inline ::google::protobuf::int32 TrxMessage::preamp() const {
  return preamp_;
}
inline void TrxMessage::set_preamp(::google::protobuf::int32 value) {
  set_has_preamp();
  preamp_ = value;
}

// optional uint32 mode = 16;
inline bool TrxMessage::has_mode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TrxMessage::set_has_mode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TrxMessage::clear_has_mode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TrxMessage::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
inline ::google::protobuf::uint32 TrxMessage::mode() const {
  return mode_;
}
inline void TrxMessage::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
}

// optional uint32 sampleRate = 17;
inline bool TrxMessage::has_samplerate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TrxMessage::set_has_samplerate() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TrxMessage::clear_has_samplerate() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TrxMessage::clear_samplerate() {
  samplerate_ = 0u;
  clear_has_samplerate();
}
inline ::google::protobuf::uint32 TrxMessage::samplerate() const {
  return samplerate_;
}
inline void TrxMessage::set_samplerate(::google::protobuf::uint32 value) {
  set_has_samplerate();
  samplerate_ = value;
}

// optional int32 squelchLevel = 18;
inline bool TrxMessage::has_squelchlevel() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TrxMessage::set_has_squelchlevel() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TrxMessage::clear_has_squelchlevel() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TrxMessage::clear_squelchlevel() {
  squelchlevel_ = 0;
  clear_has_squelchlevel();
}
inline ::google::protobuf::int32 TrxMessage::squelchlevel() const {
  return squelchlevel_;
}
inline void TrxMessage::set_squelchlevel(::google::protobuf::int32 value) {
  set_has_squelchlevel();
  squelchlevel_ = value;
}

// optional uint64 txFreq = 19;
inline bool TrxMessage::has_txfreq() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TrxMessage::set_has_txfreq() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TrxMessage::clear_has_txfreq() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TrxMessage::clear_txfreq() {
  txfreq_ = GOOGLE_ULONGLONG(0);
  clear_has_txfreq();
}
inline ::google::protobuf::uint64 TrxMessage::txfreq() const {
  return txfreq_;
}
inline void TrxMessage::set_txfreq(::google::protobuf::uint64 value) {
  set_has_txfreq();
  txfreq_ = value;
}

// optional uint32 txPower = 20;
inline bool TrxMessage::has_txpower() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TrxMessage::set_has_txpower() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TrxMessage::clear_has_txpower() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TrxMessage::clear_txpower() {
  txpower_ = 0u;
  clear_has_txpower();
}
inline ::google::protobuf::uint32 TrxMessage::txpower() const {
  return txpower_;
}
inline void TrxMessage::set_txpower(::google::protobuf::uint32 value) {
  set_has_txpower();
  txpower_ = value;
}

// optional uint32 presel = 21;
inline bool TrxMessage::has_presel() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TrxMessage::set_has_presel() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TrxMessage::clear_has_presel() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TrxMessage::clear_presel() {
  presel_ = 0u;
  clear_has_presel();
}
inline ::google::protobuf::uint32 TrxMessage::presel() const {
  return presel_;
}
inline void TrxMessage::set_presel(::google::protobuf::uint32 value) {
  set_has_presel();
  presel_ = value;
}

// optional uint32 gain = 22;
inline bool TrxMessage::has_gain() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TrxMessage::set_has_gain() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TrxMessage::clear_has_gain() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TrxMessage::clear_gain() {
  gain_ = 0u;
  clear_has_gain();
}
inline ::google::protobuf::uint32 TrxMessage::gain() const {
  return gain_;
}
inline void TrxMessage::set_gain(::google::protobuf::uint32 value) {
  set_has_gain();
  gain_ = value;
}

// optional bool ptt = 23;
inline bool TrxMessage::has_ptt() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TrxMessage::set_has_ptt() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TrxMessage::clear_has_ptt() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TrxMessage::clear_ptt() {
  ptt_ = false;
  clear_has_ptt();
}
inline bool TrxMessage::ptt() const {
  return ptt_;
}
inline void TrxMessage::set_ptt(bool value) {
  set_has_ptt();
  ptt_ = value;
}

// optional bytes settings = 25;
inline bool TrxMessage::has_settings() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TrxMessage::set_has_settings() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TrxMessage::clear_has_settings() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TrxMessage::clear_settings() {
  if (settings_ != &::google::protobuf::internal::kEmptyString) {
    settings_->clear();
  }
  clear_has_settings();
}
inline const ::std::string& TrxMessage::settings() const {
  return *settings_;
}
inline void TrxMessage::set_settings(const ::std::string& value) {
  set_has_settings();
  if (settings_ == &::google::protobuf::internal::kEmptyString) {
    settings_ = new ::std::string;
  }
  settings_->assign(value);
}
inline void TrxMessage::set_settings(const char* value) {
  set_has_settings();
  if (settings_ == &::google::protobuf::internal::kEmptyString) {
    settings_ = new ::std::string;
  }
  settings_->assign(value);
}
inline void TrxMessage::set_settings(const void* value, size_t size) {
  set_has_settings();
  if (settings_ == &::google::protobuf::internal::kEmptyString) {
    settings_ = new ::std::string;
  }
  settings_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrxMessage::mutable_settings() {
  set_has_settings();
  if (settings_ == &::google::protobuf::internal::kEmptyString) {
    settings_ = new ::std::string;
  }
  return settings_;
}
inline ::std::string* TrxMessage::release_settings() {
  clear_has_settings();
  if (settings_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = settings_;
    settings_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string playFileName = 26;
inline bool TrxMessage::has_playfilename() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TrxMessage::set_has_playfilename() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TrxMessage::clear_has_playfilename() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TrxMessage::clear_playfilename() {
  if (playfilename_ != &::google::protobuf::internal::kEmptyString) {
    playfilename_->clear();
  }
  clear_has_playfilename();
}
inline const ::std::string& TrxMessage::playfilename() const {
  return *playfilename_;
}
inline void TrxMessage::set_playfilename(const ::std::string& value) {
  set_has_playfilename();
  if (playfilename_ == &::google::protobuf::internal::kEmptyString) {
    playfilename_ = new ::std::string;
  }
  playfilename_->assign(value);
}
inline void TrxMessage::set_playfilename(const char* value) {
  set_has_playfilename();
  if (playfilename_ == &::google::protobuf::internal::kEmptyString) {
    playfilename_ = new ::std::string;
  }
  playfilename_->assign(value);
}
inline void TrxMessage::set_playfilename(const char* value, size_t size) {
  set_has_playfilename();
  if (playfilename_ == &::google::protobuf::internal::kEmptyString) {
    playfilename_ = new ::std::string;
  }
  playfilename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrxMessage::mutable_playfilename() {
  set_has_playfilename();
  if (playfilename_ == &::google::protobuf::internal::kEmptyString) {
    playfilename_ = new ::std::string;
  }
  return playfilename_;
}
inline ::std::string* TrxMessage::release_playfilename() {
  clear_has_playfilename();
  if (playfilename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playfilename_;
    playfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string recordFileName = 27;
inline bool TrxMessage::has_recordfilename() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TrxMessage::set_has_recordfilename() {
  _has_bits_[0] |= 0x02000000u;
}
inline void TrxMessage::clear_has_recordfilename() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void TrxMessage::clear_recordfilename() {
  if (recordfilename_ != &::google::protobuf::internal::kEmptyString) {
    recordfilename_->clear();
  }
  clear_has_recordfilename();
}
inline const ::std::string& TrxMessage::recordfilename() const {
  return *recordfilename_;
}
inline void TrxMessage::set_recordfilename(const ::std::string& value) {
  set_has_recordfilename();
  if (recordfilename_ == &::google::protobuf::internal::kEmptyString) {
    recordfilename_ = new ::std::string;
  }
  recordfilename_->assign(value);
}
inline void TrxMessage::set_recordfilename(const char* value) {
  set_has_recordfilename();
  if (recordfilename_ == &::google::protobuf::internal::kEmptyString) {
    recordfilename_ = new ::std::string;
  }
  recordfilename_->assign(value);
}
inline void TrxMessage::set_recordfilename(const char* value, size_t size) {
  set_has_recordfilename();
  if (recordfilename_ == &::google::protobuf::internal::kEmptyString) {
    recordfilename_ = new ::std::string;
  }
  recordfilename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrxMessage::mutable_recordfilename() {
  set_has_recordfilename();
  if (recordfilename_ == &::google::protobuf::internal::kEmptyString) {
    recordfilename_ = new ::std::string;
  }
  return recordfilename_;
}
inline ::std::string* TrxMessage::release_recordfilename() {
  clear_has_recordfilename();
  if (recordfilename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recordfilename_;
    recordfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool playFile = 28;
inline bool TrxMessage::has_playfile() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void TrxMessage::set_has_playfile() {
  _has_bits_[0] |= 0x04000000u;
}
inline void TrxMessage::clear_has_playfile() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void TrxMessage::clear_playfile() {
  playfile_ = false;
  clear_has_playfile();
}
inline bool TrxMessage::playfile() const {
  return playfile_;
}
inline void TrxMessage::set_playfile(bool value) {
  set_has_playfile();
  playfile_ = value;
}

// optional bool recordFile = 29;
inline bool TrxMessage::has_recordfile() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void TrxMessage::set_has_recordfile() {
  _has_bits_[0] |= 0x08000000u;
}
inline void TrxMessage::clear_has_recordfile() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void TrxMessage::clear_recordfile() {
  recordfile_ = false;
  clear_has_recordfile();
}
inline bool TrxMessage::recordfile() const {
  return recordfile_;
}
inline void TrxMessage::set_recordfile(bool value) {
  set_has_recordfile();
  recordfile_ = value;
}

// optional bool keepAlive = 30;
inline bool TrxMessage::has_keepalive() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void TrxMessage::set_has_keepalive() {
  _has_bits_[0] |= 0x10000000u;
}
inline void TrxMessage::clear_has_keepalive() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void TrxMessage::clear_keepalive() {
  keepalive_ = false;
  clear_has_keepalive();
}
inline bool TrxMessage::keepalive() const {
  return keepalive_;
}
inline void TrxMessage::set_keepalive(bool value) {
  set_has_keepalive();
  keepalive_ = value;
}

// optional bool readRaw = 31;
inline bool TrxMessage::has_readraw() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void TrxMessage::set_has_readraw() {
  _has_bits_[0] |= 0x20000000u;
}
inline void TrxMessage::clear_has_readraw() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void TrxMessage::clear_readraw() {
  readraw_ = false;
  clear_has_readraw();
}
inline bool TrxMessage::readraw() const {
  return readraw_;
}
inline void TrxMessage::set_readraw(bool value) {
  set_has_readraw();
  readraw_ = value;
}

// optional bool getFileList = 32;
inline bool TrxMessage::has_getfilelist() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void TrxMessage::set_has_getfilelist() {
  _has_bits_[0] |= 0x40000000u;
}
inline void TrxMessage::clear_has_getfilelist() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void TrxMessage::clear_getfilelist() {
  getfilelist_ = false;
  clear_has_getfilelist();
}
inline bool TrxMessage::getfilelist() const {
  return getfilelist_;
}
inline void TrxMessage::set_getfilelist(bool value) {
  set_has_getfilelist();
  getfilelist_ = value;
}

// optional uint32 filepos = 33;
inline bool TrxMessage::has_filepos() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void TrxMessage::set_has_filepos() {
  _has_bits_[0] |= 0x80000000u;
}
inline void TrxMessage::clear_has_filepos() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void TrxMessage::clear_filepos() {
  filepos_ = 0u;
  clear_has_filepos();
}
inline ::google::protobuf::uint32 TrxMessage::filepos() const {
  return filepos_;
}
inline void TrxMessage::set_filepos(::google::protobuf::uint32 value) {
  set_has_filepos();
  filepos_ = value;
}

// -------------------------------------------------------------------

// GuiMessage

// optional bytes audio = 1;
inline bool GuiMessage::has_audio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuiMessage::set_has_audio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuiMessage::clear_has_audio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuiMessage::clear_audio() {
  if (audio_ != &::google::protobuf::internal::kEmptyString) {
    audio_->clear();
  }
  clear_has_audio();
}
inline const ::std::string& GuiMessage::audio() const {
  return *audio_;
}
inline void GuiMessage::set_audio(const ::std::string& value) {
  set_has_audio();
  if (audio_ == &::google::protobuf::internal::kEmptyString) {
    audio_ = new ::std::string;
  }
  audio_->assign(value);
}
inline void GuiMessage::set_audio(const char* value) {
  set_has_audio();
  if (audio_ == &::google::protobuf::internal::kEmptyString) {
    audio_ = new ::std::string;
  }
  audio_->assign(value);
}
inline void GuiMessage::set_audio(const void* value, size_t size) {
  set_has_audio();
  if (audio_ == &::google::protobuf::internal::kEmptyString) {
    audio_ = new ::std::string;
  }
  audio_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuiMessage::mutable_audio() {
  set_has_audio();
  if (audio_ == &::google::protobuf::internal::kEmptyString) {
    audio_ = new ::std::string;
  }
  return audio_;
}
inline ::std::string* GuiMessage::release_audio() {
  clear_has_audio();
  if (audio_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = audio_;
    audio_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float rssi = 2;
inline bool GuiMessage::has_rssi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuiMessage::set_has_rssi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuiMessage::clear_has_rssi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuiMessage::clear_rssi() {
  rssi_ = 0;
  clear_has_rssi();
}
inline float GuiMessage::rssi() const {
  return rssi_;
}
inline void GuiMessage::set_rssi(float value) {
  set_has_rssi();
  rssi_ = value;
}

// optional bytes fft = 3;
inline bool GuiMessage::has_fft() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuiMessage::set_has_fft() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuiMessage::clear_has_fft() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuiMessage::clear_fft() {
  if (fft_ != &::google::protobuf::internal::kEmptyString) {
    fft_->clear();
  }
  clear_has_fft();
}
inline const ::std::string& GuiMessage::fft() const {
  return *fft_;
}
inline void GuiMessage::set_fft(const ::std::string& value) {
  set_has_fft();
  if (fft_ == &::google::protobuf::internal::kEmptyString) {
    fft_ = new ::std::string;
  }
  fft_->assign(value);
}
inline void GuiMessage::set_fft(const char* value) {
  set_has_fft();
  if (fft_ == &::google::protobuf::internal::kEmptyString) {
    fft_ = new ::std::string;
  }
  fft_->assign(value);
}
inline void GuiMessage::set_fft(const void* value, size_t size) {
  set_has_fft();
  if (fft_ == &::google::protobuf::internal::kEmptyString) {
    fft_ = new ::std::string;
  }
  fft_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuiMessage::mutable_fft() {
  set_has_fft();
  if (fft_ == &::google::protobuf::internal::kEmptyString) {
    fft_ = new ::std::string;
  }
  return fft_;
}
inline ::std::string* GuiMessage::release_fft() {
  clear_has_fft();
  if (fft_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fft_;
    fft_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes displayText = 4;
inline bool GuiMessage::has_displaytext() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuiMessage::set_has_displaytext() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuiMessage::clear_has_displaytext() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuiMessage::clear_displaytext() {
  if (displaytext_ != &::google::protobuf::internal::kEmptyString) {
    displaytext_->clear();
  }
  clear_has_displaytext();
}
inline const ::std::string& GuiMessage::displaytext() const {
  return *displaytext_;
}
inline void GuiMessage::set_displaytext(const ::std::string& value) {
  set_has_displaytext();
  if (displaytext_ == &::google::protobuf::internal::kEmptyString) {
    displaytext_ = new ::std::string;
  }
  displaytext_->assign(value);
}
inline void GuiMessage::set_displaytext(const char* value) {
  set_has_displaytext();
  if (displaytext_ == &::google::protobuf::internal::kEmptyString) {
    displaytext_ = new ::std::string;
  }
  displaytext_->assign(value);
}
inline void GuiMessage::set_displaytext(const void* value, size_t size) {
  set_has_displaytext();
  if (displaytext_ == &::google::protobuf::internal::kEmptyString) {
    displaytext_ = new ::std::string;
  }
  displaytext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuiMessage::mutable_displaytext() {
  set_has_displaytext();
  if (displaytext_ == &::google::protobuf::internal::kEmptyString) {
    displaytext_ = new ::std::string;
  }
  return displaytext_;
}
inline ::std::string* GuiMessage::release_displaytext() {
  clear_has_displaytext();
  if (displaytext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = displaytext_;
    displaytext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool restartInd = 5;
inline bool GuiMessage::has_restartind() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuiMessage::set_has_restartind() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuiMessage::clear_has_restartind() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuiMessage::clear_restartind() {
  restartind_ = false;
  clear_has_restartind();
}
inline bool GuiMessage::restartind() const {
  return restartind_;
}
inline void GuiMessage::set_restartind(bool value) {
  set_has_restartind();
  restartind_ = value;
}

// optional bytes key = 6;
inline bool GuiMessage::has_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuiMessage::set_has_key() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuiMessage::clear_has_key() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuiMessage::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& GuiMessage::key() const {
  return *key_;
}
inline void GuiMessage::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void GuiMessage::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void GuiMessage::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuiMessage::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* GuiMessage::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string files = 7;
inline int GuiMessage::files_size() const {
  return files_.size();
}
inline void GuiMessage::clear_files() {
  files_.Clear();
}
inline const ::std::string& GuiMessage::files(int index) const {
  return files_.Get(index);
}
inline ::std::string* GuiMessage::mutable_files(int index) {
  return files_.Mutable(index);
}
inline void GuiMessage::set_files(int index, const ::std::string& value) {
  files_.Mutable(index)->assign(value);
}
inline void GuiMessage::set_files(int index, const char* value) {
  files_.Mutable(index)->assign(value);
}
inline void GuiMessage::set_files(int index, const char* value, size_t size) {
  files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuiMessage::add_files() {
  return files_.Add();
}
inline void GuiMessage::add_files(const ::std::string& value) {
  files_.Add()->assign(value);
}
inline void GuiMessage::add_files(const char* value) {
  files_.Add()->assign(value);
}
inline void GuiMessage::add_files(const char* value, size_t size) {
  files_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GuiMessage::files() const {
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GuiMessage::mutable_files() {
  return &files_;
}

// optional uint64 playFileLen = 8;
inline bool GuiMessage::has_playfilelen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuiMessage::set_has_playfilelen() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuiMessage::clear_has_playfilelen() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuiMessage::clear_playfilelen() {
  playfilelen_ = GOOGLE_ULONGLONG(0);
  clear_has_playfilelen();
}
inline ::google::protobuf::uint64 GuiMessage::playfilelen() const {
  return playfilelen_;
}
inline void GuiMessage::set_playfilelen(::google::protobuf::uint64 value) {
  set_has_playfilelen();
  playfilelen_ = value;
}

// optional uint64 playFilePos = 9;
inline bool GuiMessage::has_playfilepos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuiMessage::set_has_playfilepos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuiMessage::clear_has_playfilepos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuiMessage::clear_playfilepos() {
  playfilepos_ = GOOGLE_ULONGLONG(0);
  clear_has_playfilepos();
}
inline ::google::protobuf::uint64 GuiMessage::playfilepos() const {
  return playfilepos_;
}
inline void GuiMessage::set_playfilepos(::google::protobuf::uint64 value) {
  set_has_playfilepos();
  playfilepos_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TrxProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_trx_2eproto__INCLUDED
